esse é o src do meu backend:
src/
├── config/         # Configuration files
│   ├── db.js       # Database configuration
│   └── swagger.js  # Swagger configuration
├── middleware/     # Custom middleware
│   ├── authMiddleware.js     # Authentication middleware
│   └── errorMiddleware.js    # Error handling middleware
├── models/         # Database models
│   ├── userModel.js          # User model
│   └── itemModel.js          # Item model
├── presenters/     # Business logic (presenters)
│   ├── userPresenter.js      # User presenter
│   └── itemPresenter.js      # Item presenter
├── routes/         # API routes
│   ├── index.js              # Main router
│   ├── userRoutes.js         # User routes
│   └── itemRoutes.js         # Item routes
├── utils/          # Utility functions
│   ├── logger.js              # Logging utility
│   └── responseFormatter.js   # Response formatting utility
├── db/             # Database scripts
│   └── init.sql               # Database initialization script
│
└── server.js       # Entry point

backend/src/config/db.js:

require('dotenv').config(); // Carrega as variáveis de ambiente 
const { Pool } = require('pg');
const logger = require('../utils/logger');


const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
  ssl: process.env.NODE_ENV === 'production' ? {rejectUnauthorized: false } : undefined,
});


pool.connect()
  .then(client => {
    logger.info('Successfully connected to the database via DATABASE_URL!!');
    client.release();
  })
  .catch(err => {
    logger.error('Error connecting to the database via DATABASE_URL:', err.stack);
  });

module.exports = {
  query: (text, params) => pool.query(text, params),
  getClient: () => pool.connect(),
};

---------------------

backend/src/config/Swagger.js:

const swaggerJsdoc = require('swagger-jsdoc');
const swaggerUi = require('swagger-ui-express');

const options = {
  definition: {
    openapi: '3.0.0',
    info: {
      title: 'Express MVP API',
      version: '1.0.0',
      description: 'API documentation for Express MVP backend',
    },
    servers: [
      {
        url: `http://localhost:${process.env.PORT || 3000}`,
        description: 'Development server',
      },
    ],
  },
  apis: ['./src/routes/*.js'], // Path to the API docs
};

const specs = swaggerJsdoc(options);

const setupSwagger = (app) => {
  app.use('/api-docs', swaggerUi.serve, swaggerUi.setup(specs));
};

module.exports = { setupSwagger };
-------------------------------
backend/src/db/init.sql:

-- Optional: Add some indexes for performance
CREATE INDEX IF NOT EXISTS idx_users_email ON users (email);
CREATE INDEX IF NOT EXISTS idx_items_user_id ON items (user_id);

-------------------------------
backend/src/middleware/authMiddleware.js:

const jwt = require('jsonwebtoken');
const { validationResult } = require('express-validator');

// Protect routes
const protect = (req, res, next) => {
  // Get token from header
  const token = req.header('x-auth-token');

  // Check if no token
  if (!token) {
    return res.status(401).json({ message: 'No token, authorization denied' });
  }

  try {
    // Verify token
    const decoded = jwt.verify(token, process.env.JWT_SECRET);
    req.user = decoded.user;
    next();
  } catch (err) {
    res.status(401).json({ message: 'Token is not valid' });
  }
};

// Validate request
const validate = (validations) => {
  return async (req, res, next) => {
    await Promise.all(validations.map(validation => validation.run(req)));

    const errors = validationResult(req);
    if (errors.isEmpty()) {
      return next();
    }

    res.status(400).json({ 
      errors: errors.array().map(err => ({
        field: err.param,
        message: err.msg
      }))
    });
  };
};

module.exports = { protect, validate };

---------------------------
backend/src/middleware/errorMiddleware.js:


const logger = require('../utils/logger');

// 404 Not Found handler
const notFoundHandler = (req, res, next) => {
  const error = new Error(`Not Found - ${req.originalUrl}`);
  res.status(404);
  next(error);
};

// General error handler
const errorHandler = (err, req, res, next) => {
  const statusCode = res.statusCode === 200 ? 500 : res.statusCode;
  
  logger.error(`${err.message} - ${req.originalUrl} - ${req.method} - ${req.ip}`);
  
  res.status(statusCode).json({
    message: err.message,
    stack: process.env.NODE_ENV === 'production' ? '🥞' : err.stack,
  });
};

module.exports = { notFoundHandler, errorHandler };
-----------------------------------
backend/src/models/itemModel.js:
const db = require('../config/db');

class ItemModel {
  /**
   * Create a new item
   * @param {Object} itemData - Item data (title, description, user_id)
   * @returns {Promise<Object>} Created item
   */
  async create(itemData) {
    const { title, description, user_id } = itemData;
    
    const query = `
      INSERT INTO items (title, description, user_id)
      VALUES ($1, $2, $3)
      RETURNING id, title, description, user_id, created_at
    `;
    
    const result = await db.query(query, [title, description, user_id]);
    return result.rows[0];
  }
  
  /**
   * Find item by ID
   * @param {Number} id - Item ID
   * @returns {Promise<Object>} Item object
   */
  async findById(id) {
    const query = `
      SELECT id, title, description, user_id, created_at, updated_at
      FROM items
      WHERE id = $1
    `;
    
    const result = await db.query(query, [id]);
    return result.rows[0];
  }
  
  /**
   * Get all items by user ID
   * @param {Number} userId - User ID
   * @returns {Promise<Array>} Array of items
   */
  async findByUserId(userId) {
    const query = `
      SELECT id, title, description, created_at, updated_at
      FROM items
      WHERE user_id = $1
      ORDER BY created_at DESC
    `;
    
    const result = await db.query(query, [userId]);
    return result.rows;
  }
  
  /**
   * Update item
   * @param {Number} id - Item ID
   * @param {Object} itemData - Item data to update
   * @returns {Promise<Object>} Updated item
   */
  async update(id, userId, itemData) {
    const { title, description } = itemData;
    
    const query = `
      UPDATE items
      SET title = $1, description = $2, updated_at = NOW()
      WHERE id = $3 AND user_id = $4
      RETURNING id, title, description, user_id, created_at, updated_at
    `;
    
    const result = await db.query(query, [title, description, id, userId]);
    return result.rows[0];
  }
  
  /**
   * Delete item
   * @param {Number} id - Item ID
   * @param {Number} userId - User ID (for authorization)
   * @returns {Promise<Boolean>} Success status
   */
  async delete(id, userId) {
    const query = `
      DELETE FROM items
      WHERE id = $1 AND user_id = $2
    `;
    
    const result = await db.query(query, [id, userId]);
    return result.rowCount > 0;
  }
}

module.exports = new ItemModel();
-------------------------
backend/src/models/userModel.js:


const db = require('../config/db');
const bcrypt = require('bcrypt');

class UserModel {
  /**
   * Create a new user
   * @param {Object} userData - User data (username, email, password)
   * @returns {Promise<Object>} Created user
   */
  async create(userData) {
    const { username, email, password } = userData;
    
    // Hash password
    const salt = await bcrypt.genSalt(10);
    const hashedPassword = await bcrypt.hash(password, salt);
    
    const query = `
      INSERT INTO users (username, email, password)
      VALUES ($1, $2, $3)
      RETURNING id, username, email, created_at
    `;
    
    const result = await db.query(query, [username, email, hashedPassword]);
    return result.rows[0];
  }
  
  /**
   * Find user by ID
   * @param {Number} id - User ID
   * @returns {Promise<Object>} User object
   */
  async findById(id) {
    const query = `
      SELECT id, username, email, created_at
      FROM users
      WHERE id = $1
    `;
    
    const result = await db.query(query, [id]);
    return result.rows[0];
  }
  
  /**
   * Find user by email
   * @param {String} email - User email
   * @returns {Promise<Object>} User object with password
   */
  async findByEmail(email) {
    const query = `
      SELECT id, username, email, password, created_at
      FROM users
      WHERE email = $1
    `;
    
    const result = await db.query(query, [email]);
    return result.rows[0];
  }
  
  /**
   * Get all users
   * @returns {Promise<Array>} Array of users
   */
  async findAll() {
    const query = `
      SELECT id, username, email, created_at
      FROM users
      ORDER BY created_at DESC
    `;
    
    const result = await db.query(query);
    return result.rows;
  }
  
  /**
   * Update user
   * @param {Number} id - User ID
   * @param {Object} userData - User data to update
   * @returns {Promise<Object>} Updated user
   */
  async update(id, userData) {
    const { username, email } = userData;
    
    const query = `
      UPDATE users
      SET username = $1, email = $2, updated_at = NOW()
      WHERE id = $3
      RETURNING id, username, email, created_at, updated_at
    `;
    
    const result = await db.query(query, [username, email, id]);
    return result.rows[0];
  }
  
  /**
   * Delete user
   * @param {Number} id - User ID
   * @returns {Promise<Boolean>} Success status
   */
  async delete(id) {
    const query = `
      DELETE FROM users
      WHERE id = $1
    `;
    
    const result = await db.query(query, [id]);
    return result.rowCount > 0;
  }
}

module.exports = new UserModel();
--------------------------------------
backend/src/presenter/itemPresenter.js:


const itemModel = require('../models/itemModel');
const { formatSuccess, formatError } = require('../utils/responseFormatter');

class ItemPresenter {
  /**
   * Create a new item
   * @param {Object} itemData - Item data including user_id
   * @returns {Promise<Object>} Response with item data
   */
  async createItem(itemData) {
    try {
      const item = await itemModel.create(itemData);
      return formatSuccess({ item }, 'Item created successfully');
    } catch (error) {
      return formatError('Error creating item: ' + error.message);
    }
  }
  
  /**
   * Get item by ID
   * @param {Number} itemId - Item ID
   * @param {Number} userId - User ID for authorization
   * @returns {Promise<Object>} Response with item data
   */
  async getItemById(itemId, userId) {
    try {
      const item = await itemModel.findById(itemId);
      
      if (!item) {
        return formatError('Item not found', 404);
      }
      
      // Check if item belongs to user
      if (item.user_id !== userId) {
        return formatError('Not authorized to access this item', 403);
      }
      
      return formatSuccess({ item }, 'Item retrieved');
    } catch (error) {
      return formatError('Error getting item: ' + error.message);
    }
  }
  
  /**
   * Get all items for a user
   * @param {Number} userId - User ID
   * @returns {Promise<Object>} Response with array of items
   */
  async getUserItems(userId) {
    try {
      const items = await itemModel.findByUserId(userId);
      return formatSuccess({ items }, 'Items retrieved successfully');
    } catch (error) {
      return formatError('Error getting items: ' + error.message);
    }
  }
  
  /**
   * Update an item
   * @param {Number} itemId - Item ID
   * @param {Number} userId - User ID for authorization
   * @param {Object} itemData - Item data to update
   * @returns {Promise<Object>} Response with updated item
   */
  async updateItem(itemId, userId, itemData) {
    try {
      // First check if item exists and belongs to user
      const existingItem = await itemModel.findById(itemId);
      
      if (!existingItem) {
        return formatError('Item not found', 404);
      }
      
      if (existingItem.user_id !== userId) {
        return formatError('Not authorized to update this item', 403);
      }
      
      const updatedItem = await itemModel.update(itemId, userId, itemData);
      
      return formatSuccess({ item: updatedItem }, 'Item updated successfully');
    } catch (error) {
      return formatError('Error updating item: ' + error.message);
    }
  }
  
  /**
   * Delete an item
   * @param {Number} itemId - Item ID
   * @param {Number} userId - User ID for authorization
   * @returns {Promise<Object>} Response with success message
   */
  async deleteItem(itemId, userId) {
    try {
      // Check if item exists and belongs to user first
      const existingItem = await itemModel.findById(itemId);
      
      if (!existingItem) {
        return formatError('Item not found', 404);
      }
      
      if (existingItem.user_id !== userId) {
        return formatError('Not authorized to delete this item', 403);
      }
      
      const deleted = await itemModel.delete(itemId, userId);
      
      if (!deleted) {
        return formatError('Failed to delete item', 500);
      }
      
      return formatSuccess(null, 'Item deleted successfully');
    } catch (error) {
      return formatError('Error deleting item: ' + error.message);
    }
  }
}

module.exports = new ItemPresenter();
---------------------
backend/src/presenter/userPresenter.js:


const userModel = require('../models/userModel');
const { formatSuccess, formatError } = require('../utils/responseFormatter');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcrypt');

class UserPresenter {
  /**
   * Register a new user
   * @param {Object} userData - User registration data
   * @returns {Promise<Object>} Response with user data and token
   */
  async register(userData) {
    try {
      // Check if user already exists
      const existingUser = await userModel.findByEmail(userData.email);
      if (existingUser) {
        return formatError('User already exists', 400);
      }
      
      // Create user
      const user = await userModel.create(userData);
      
      // Generate JWT token
      const token = this.generateToken(user.id);
      
      return formatSuccess({ user, token }, 'User registered successfully');
    } catch (error) {
      return formatError('Error registering user: ' + error.message);
    }
  }
  
  /**
   * Login user
   * @param {String} email - User email
   * @param {String} password - User password
   * @returns {Promise<Object>} Response with user data and token
   */
  async login(email, password) {
    try {
      // Find user by email
      const user = await userModel.findByEmail(email);
      if (!user) {
        return formatError('Invalid credentials', 401);
      }
      
      // Check password
      const isMatch = await bcrypt.compare(password, user.password);
      if (!isMatch) {
        return formatError('Invalid credentials', 401);
      }
      
      // Generate JWT token
      const token = this.generateToken(user.id);
      
      // Remove password from response
      const { password: _, ...userWithoutPassword } = user;
      
      return formatSuccess({ 
        user: userWithoutPassword, 
        token 
      }, 'Login successful');
    } catch (error) {
      return formatError('Error logging in: ' + error.message);
    }
  }
  
  /**
   * Get user profile
   * @param {Number} userId - User ID
   * @returns {Promise<Object>} Response with user data
   */
  async getProfile(userId) {
    try {
      const user = await userModel.findById(userId);
      if (!user) {
        return formatError('User not found', 404);
      }
      
      return formatSuccess({ user }, 'User profile retrieved');
    } catch (error) {
      return formatError('Error getting user profile: ' + error.message);
    }
  }
  
  /**
   * Update user profile
   * @param {Number} userId - User ID
   * @param {Object} userData - User data to update
   * @returns {Promise<Object>} Response with updated user data
   */
  async updateProfile(userId, userData) {
    try {
      // Check if user exists
      const existingUser = await userModel.findById(userId);
      if (!existingUser) {
        return formatError('User not found', 404);
      }
      
      // Update user
      const updatedUser = await userModel.update(userId, userData);
      
      return formatSuccess({ user: updatedUser }, 'User profile updated');
    } catch (error) {
      return formatError('Error updating user profile: ' + error.message);
    }
  }
  
  /**
   * Delete user
   * @param {Number} userId - User ID
   * @returns {Promise<Object>} Response with success message
   */
  async deleteUser(userId) {
    try {
      const deleted = await userModel.delete(userId);
      if (!deleted) {
        return formatError('User not found', 404);
      }
      
      return formatSuccess(null, 'User deleted successfully');
    } catch (error) {
      return formatError('Error deleting user: ' + error.message);
    }
  }
  
  /**
   * Generate JWT token
   * @param {Number} userId - User ID
   * @returns {String} JWT token
   */
  generateToken(userId) {
    return jwt.sign(
      { user: { id: userId } },
      process.env.JWT_SECRET,
      { expiresIn: process.env.JWT_EXPIRES_IN }
    );
  }
}

module.exports = new UserPresenter();


----------------------------------
backend/src/routes/index.js:


const express = require('express');
const router = express.Router();
const userRoutes = require('./userRoutes');
const itemRoutes = require('./itemRoutes');

// Welcome route
router.get('/', (req, res) => {
  res.json({ 
    message: 'Welcome to the Express MVP API',
    version: '1.0.0'
  });
});

// Routes
router.use('/users', userRoutes);
router.use('/items', itemRoutes);

module.exports = router;

-------------------------------
backend/src/routes/itemRoutes.js:


const express = require('express');
const router = express.Router();
const { body } = require('express-validator');
const itemPresenter = require('../presenters/itemPresenter');
const { protect, validate } = require('../middleware/authMiddleware');

/**
 * @swagger
 * components:
 *   schemas:
 *     Item:
 *       type: object
 *       required:
 *         - title
 *         - user_id
 *       properties:
 *         id:
 *           type: integer
 *           description: The auto-generated ID of the item
 *         title:
 *           type: string
 *           description: The item title
 *         description:
 *           type: string
 *           description: The item description
 *         user_id:
 *           type: integer
 *           description: ID of the user who owns this item
 *         created_at:
 *           type: string
 *           format: date
 *           description: The date the item was created
 *         updated_at:
 *           type: string
 *           format: date
 *           description: The date the item was last updated
 */

/**
 * @swagger
 * /api/items:
 *   get:
 *     summary: Get all items for the authenticated user
 *     tags: [Items]
 *     security:
 *       - bearerAuth: []
 *     responses:
 *       200:
 *         description: List of items
 *       401:
 *         description: Not authenticated
 */
router.get('/', protect, async (req, res) => {
  const result = await itemPresenter.getUserItems(req.user.id);
  res.status(result.success ? 200 : result.status).json(result);
});

/**
 * @swagger
 * /api/items:
 *   post:
 *     summary: Create a new item
 *     tags: [Items]
 *     security:
 *       - bearerAuth: []
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             required:
 *               - title
 *             properties:
 *               title:
 *                 type: string
 *               description:
 *                 type: string
 *     responses:
 *       201:
 *         description: Item created successfully
 *       400:
 *         description: Invalid input
 *       401:
 *         description: Not authenticated
 */
router.post(
  '/',
  protect,
  validate([
    body('title').trim().notEmpty().withMessage('Title is required'),
    body('description').optional().trim()
  ]),
  async (req, res) => {
    // Add user_id to item data
    const itemData = {
      ...req.body,
      user_id: req.user.id
    };
    
    const result = await itemPresenter.createItem(itemData);
    res.status(result.success ? 201 : result.status).json(result);
  }
);

/**
 * @swagger
 * /api/items/{id}:
 *   get:
 *     summary: Get an item by ID
 *     tags: [Items]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: integer
 *     responses:
 *       200:
 *         description: Item details
 *       401:
 *         description: Not authenticated
 *       403:
 *         description: Not authorized to access this item
 *       404:
 *         description: Item not found
 */
router.get('/:id', protect, async (req, res) => {
  const result = await itemPresenter.getItemById(parseInt(req.params.id), req.user.id);
  res.status(result.success ? 200 : result.status).json(result);
});

/**
 * @swagger
 * /api/items/{id}:
 *   put:
 *     summary: Update an item
 *     tags: [Items]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: integer
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               title:
 *                 type: string
 *               description:
 *                 type: string
 *     responses:
 *       200:
 *         description: Item updated successfully
 *       400:
 *         description: Invalid input
 *       401:
 *         description: Not authenticated
 *       403:
 *         description: Not authorized to update this item
 *       404:
 *         description: Item not found
 */
router.put(
  '/:id',
  protect,
  validate([
    body('title').trim().optional().notEmpty().withMessage('Title cannot be empty'),
    body('description').optional().trim()
  ]),
  async (req, res) => {
    const result = await itemPresenter.updateItem(
      parseInt(req.params.id),
      req.user.id,
      req.body
    );
    res.status(result.success ? 200 : result.status).json(result);
  }
);

/**
 * @swagger
 * /api/items/{id}:
 *   delete:
 *     summary: Delete an item
 *     tags: [Items]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: integer
 *     responses:
 *       200:
 *         description: Item deleted successfully
 *       401:
 *         description: Not authenticated
 *       403:
 *         description: Not authorized to delete this item
 *       404:
 *         description: Item not found
 */
router.delete('/:id', protect, async (req, res) => {
  const result = await itemPresenter.deleteItem(parseInt(req.params.id), req.user.id);
  res.status(result.success ? 200 : result.status).json(result);
});

module.exports = router;
-----------------------------------
backend/src/routes/userRoutes.js:


const express = require('express');
const router = express.Router();
const { body } = require('express-validator');
const userPresenter = require('../presenters/userPresenter');
const { protect, validate } = require('../middleware/authMiddleware');

/**
 * @swagger
 * components:
 *   schemas:
 *     User:
 *       type: object
 *       required:
 *         - username
 *         - email
 *         - password
 *       properties:
 *         id:
 *           type: integer
 *           description: The auto-generated ID of the user
 *         username:
 *           type: string
 *           description: The username
 *         email:
 *           type: string
 *           description: The user email
 *         created_at:
 *           type: string
 *           format: date
 *           description: The date the user was created
 *         updated_at:
 *           type: string
 *           format: date
 *           description: The date the user was last updated
 */

/**
 * @swagger
 * /api/users/register:
 *   post:
 *     summary: Register a new user
 *     tags: [Users]
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             required:
 *               - username
 *               - email
 *               - password
 *             properties:
 *               username:
 *                 type: string
 *               email:
 *                 type: string
 *               password:
 *                 type: string
 *     responses:
 *       201:
 *         description: User registered successfully
 *       400:
 *         description: Invalid input or user already exists
 */
router.post(
  '/register',
  validate([
    body('username').trim().notEmpty().withMessage('Username is required'),
    body('email').isEmail().withMessage('Valid email is required'),
    body('password').isLength({ min: 6 }).withMessage('Password must be at least 6 characters')
  ]),
  async (req, res) => {
    const result = await userPresenter.register(req.body);
    res.status(result.success ? 201 : result.status).json(result);
  }
);

/**
 * @swagger
 * /api/users/login:
 *   post:
 *     summary: Login a user
 *     tags: [Users]
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             required:
 *               - email
 *               - password
 *             properties:
 *               email:
 *                 type: string
 *               password:
 *                 type: string
 *     responses:
 *       200:
 *         description: Login successful
 *       401:
 *         description: Invalid credentials
 */
router.post(
  '/login',
  validate([
    body('email').isEmail().withMessage('Valid email is required'),
    body('password').notEmpty().withMessage('Password is required')
  ]),
  async (req, res) => {
    const { email, password } = req.body;
    const result = await userPresenter.login(email, password);
    res.status(result.success ? 200 : result.status).json(result);
  }
);

/**
 * @swagger
 * /api/users/profile:
 *   get:
 *     summary: Get current user profile
 *     tags: [Users]
 *     security:
 *       - bearerAuth: []
 *     responses:
 *       200:
 *         description: User profile retrieved
 *       401:
 *         description: Not authenticated
 */
router.get('/profile', protect, async (req, res) => {
  const result = await userPresenter.getProfile(req.user.id);
  res.status(result.success ? 200 : result.status).json(result);
});

/**
 * @swagger
 * /api/users/profile:
 *   put:
 *     summary: Update user profile
 *     tags: [Users]
 *     security:
 *       - bearerAuth: []
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               username:
 *                 type: string
 *               email:
 *                 type: string
 *     responses:
 *       200:
 *         description: Profile updated successfully
 *       401:
 *         description: Not authenticated
 *       404:
 *         description: User not found
 */
router.put(
  '/profile',
  protect,
  validate([
    body('username').trim().optional().notEmpty().withMessage('Username cannot be empty'),
    body('email').optional().isEmail().withMessage('Valid email is required')
  ]),
  async (req, res) => {
    const result = await userPresenter.updateProfile(req.user.id, req.body);
    res.status(result.success ? 200 : result.status).json(result);
  }
);

/**
 * @swagger
 * /api/users:
 *   delete:
 *     summary: Delete user account
 *     tags: [Users]
 *     security:
 *       - bearerAuth: []
 *     responses:
 *       200:
 *         description: User deleted successfully
 *       401:
 *         description: Not authenticated
 *       404:
 *         description: User not found
 */
router.delete('/', protect, async (req, res) => {
  const result = await userPresenter.deleteUser(req.user.id);
  res.status(result.success ? 200 : result.status).json(result);
});

module.exports = router;
--------------------------------------------
backend/src/utils/logger.js:

const winston = require('winston');

// Define log format
const logFormat = winston.format.combine(
  winston.format.timestamp({ format: 'YYYY-MM-DD HH:mm:ss' }),
  winston.format.errors({ stack: true }),
  winston.format.splat(),
  winston.format.json()
);

// Create logger
const logger = winston.createLogger({
  level: process.env.NODE_ENV === 'production' ? 'info' : 'debug',
  format: logFormat,
  defaultMeta: { service: 'express-mvp-api' },
  transports: [
    new winston.transports.Console({
      format: winston.format.combine(
        winston.format.colorize(),
        winston.format.printf(
          ({ level, message, timestamp }) => `${timestamp} ${level}: ${message}`
        )
      ),
    }),
    new winston.transports.File({ filename: 'logs/error.log', level: 'error' }),
    new winston.transports.File({ filename: 'logs/combined.log' }),
  ],
});

module.exports = logger;

------------------------------------------

backend/src/utils/responseFormatter.js:


/**
 * Format success response
 * @param {Object} data - The data to be sent
 * @param {String} message - Success message
 * @returns {Object} Formatted response object
 */
const formatSuccess = (data, message = 'Operation successful') => {
  return {
    success: true,
    message,
    data
  };
};

/**
 * Format error response
 * @param {String} message - Error message
 * @param {Number} status - HTTP status code
 * @param {Object} errors - Additional error details
 * @returns {Object} Formatted error object
 */
const formatError = (message = 'An error occurred', status = 500, errors = null) => {
  return {
    success: false,
    message,
    status,
    errors
  };
};

module.exports = {
  formatSuccess,
  formatError
};

---------------------------
backend/src/db.js:

require('dotenv').config();
const { Pool } = require('pg');

const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
  ssl: { rejectUnauthorized: false } 
});

pool.connect()
  .then(() => console.log("✅ Conectado ao banco de dados Neon!"))
  .catch(err => console.error("❌ Erro ao conectar ao banco:", err));

module.exports = pool;

---------------------------
backend/src/server.js:

require('dotenv').config();
const express = require('express');
const cors = require('cors');
const helmet = require('helmet');
const morgan = require('morgan');
const { setupSwagger } = require('./config/swagger');
const logger = require('./utils/logger');
const { notFoundHandler, errorHandler } = require('./middleware/errorMiddleware');
const routes = require('./routes');
const { Pool } = require('pg');

// Initialize express app
const app = express();

app.use(cors());

// Set port
const PORT = process.env.PORT || 3001;

const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
  ssl: { rejectUnauthorized: false } // Necessário para Supabase
});

// Middleware
app.use(helmet()); // Security headers
app.use(cors()); // Enable CORS
app.use(express.json()); // Parse JSON bodies
app.use(express.urlencoded({ extended: true })); // Parse URL-encoded bodies
app.use(morgan('dev', { stream: { write: message => logger.info(message.trim()) } })); // Logging

// Setup Swagger
setupSwagger(app);

// API Routes
app.use('/api', routes);

// Error handling middleware
app.use(notFoundHandler);
app.use(errorHandler);

pool.connect()
  .then(() => console.log("✅ Conectado ao banco de dados Supabase!"))
  .catch(err => console.error("❌ Erro ao conectar ao banco:", err));

// Start server
app.listen(PORT, () => {
  logger.info(`Server running in ${process.env.NODE_ENV} mode on port ${PORT}`);
});

module.exports = pool;

module.exports = app; // For testing
-----------------------------------------
backend/.env:

DATABASE_URL=postgresql://neondb_owner:npg_RJBYdH8NylQ1@ep-dark-leaf-a8c0f8s2-pooler.eastus2.azure.neon.tech/neondb?sslmode=require
PORT=3002
NODE_ENV=development
JWT_SECRET=vPmPqAYUGeFHWpF9AWInrNTJX24XtrV0cyOxkC4e
JWT_EXPIRES_IN=3600


-----------------------------------------
backend/package.json:
{
  "name": "express-mvp-backend",
  "version": "1.0.0",
  "description": "Backend API with Express following MVP architecture",
  "main": "src/server.js",
  "scripts": {
    "start": "node src/server.js",
    "dev": "nodemon src/server.js",
    "test": "jest"
  },
  "dependencies": {
    "bcrypt": "^5.1.1",
    "cors": "^2.8.5",
    "dotenv": "^16.3.1",
    "express": "^4.18.2",
    "express-validator": "^7.0.1",
    "helmet": "^7.1.0",
    "jsonwebtoken": "^9.0.2",
    "morgan": "^1.10.0",
    "pg": "^8.11.3",
    "swagger-jsdoc": "^6.2.8",
    "swagger-ui-express": "^5.0.0",
    "winston": "^3.11.0"
  },
  "devDependencies": {
    "jest": "^29.7.0",
    "nodemon": "^3.0.2",
    "supertest": "^6.3.3"
  }
}
---------------------------------

